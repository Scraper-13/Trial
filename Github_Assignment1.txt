1. What are the advantages of using Git ?
=> Git is an Open Source Distributed Version Control System. It is designed for Speed, Simplicity, Fully Distributed, Excellent support for parallel development, support for hundreds of parallel branches and Integrity

* Performance- Committing, branching, merging all are optimized for a better performance than other systems.
* Security - Git's algorithm manages your versions, files, and directory securely so that your work is not corrupted.
* Branching Model - Git branching model lets you have multiple local branches which are independent of each other.
* staging Area - Git has an intermediate stage called “index” or “staging area” where commits can be formatted and modified before completing the commit.
* distributed - The repository or the complete code base is mirrored onto the developer’s system so that he can work on it only. 
* OpenSource - It is Open Source, hence developers from all over the world to contribute to the software and make it more and more powerful through features and additional plugins.


2. What language is used in Git ?
=> core Git distribution are written in C and (Bourne) shell, and a handful in Perl.
So, From that these are the languages used in that repository:

C - 45%
Shell - 35%
Perl - 8%
Tcl - 5%
Python - 2%
C ++ - 2%


3. What is the meaning of “Index” or “Staging Area” in Git ?
=> “index” or “staging area” where commits can be formatted and modified before completing the commit.


4. What is the process for creating a repository in Git ?
=>
* Using Github Account
- Click the new repository button in the top-right. You’ll have an option there to initialize the repository.
- Click the “Create repository” button.

* Using terminal
- git init DirectoryName
- git add .
- git commit -m "Creating new repository"
- git push



5. What is ‘head’ in Git and how many heads can be created in a repository ?
=> HEAD is the "current branch". When you switch branches with git checkout, the HEAD revision changes to point to the tip of the new branch.
- Each head has a name (branch name or tag name, etc). By default, there is a head in every repository called master. A repository can contain any number of heads. At any given time, one head is selected as the “current head".


6. Why do we need branching in Git?
=> In a collaborative environment, it is common for several developers to share and work on the same source code. While some developers will be fixing bugs, others will be implementing new features, etc. With so much going on, there needs to be a system in place for managing different versions of the same code base. Branching allows each developer to branch out from the original code base and isolate their work from others. It also helps Git to easily merge versions later on.


7. Write a way to create a new branch in Git?
=> git branch <BranchName>


8. How do you define a ‘conflict’ in Git?
=>A conflict arises when two separate branches have made edits to the same line in a file, or when a file has been deleted in one branch but edited in the other. Conflicts will most likely happen when working in a team environment.


9. How to resolve a conflict in Git?
=>
# Resolving a merge conflict using the command line

1. Open Git Bash. 
2. Navigate into the local Git repository that has the merge conflict.

3. cd REPOSITORY-NAME
Generate a list of the files affected by the merge conflict.
$ git status

4. Open your favorite text editor, such as Atom, and navigate to the file that has merge conflicts.

5. To see the beginning of the merge conflict in your file, search the file for the conflict marker <<<<<<<. When you open the file in your text editor, you'll see the changes from the HEAD or base branch after the line <<<<<<< HEAD. Next, you'll see =======, which divides your changes from the changes in the other branch, followed by >>>>>>> BRANCH-NAME.

6. Decide if you want to keep only your branch's changes, keep only the other branch's changes, or make a brand new change, which may incorporate changes from both branches. Delete the conflict markers <<<<<<<, =======, >>>>>>> and make the changes you want in the final merge.

7. Add or stage your changes.
$ git add .

8. Commit your changes with a comment.

You can now merge the branches on the command line or push your changes to your remote repository on GitHub and merge your changes in a pull request.


# Tools for when git fails to merge

- git status = The status command is in frequent use when a working with Git and during a merge it will help identify conflicted files.

- git log --merge = Passing the --merge argument to the git log command will produce a log with a list of commits that conflict between the merging branches.

- git diff = diff helps find differences between states of a repository/files. This is useful in predicting and preventing merge conflicts.

- git checkout = checkout can be used for undoing changes to files, or for changing branches

- git reset --mixed = reset can be used to undo changes to the working directory and staging area.

- git merge --abort = Executing git merge with the --abort option will exit from the merge process and return the branch to the state before the merge began.

- git reset = Git reset can be used during a merge conflict to reset conflicted files to a know good state


10. What is the function of ‘git config’?
=> The git config command is a function that sets configuration variables. It controls git look and operation.


11. What is Git fork?
=> Git Fork means you just create a copy of the main repository of a project source code to your own GitHub profile


12. Difference between fork, branch and clone?
=> 
# A clone is a copy of all the code on the master branch.
It is an exact replica of the code on github.

# A branch is a slightly changed or modified section of code that meets different objectives.
Branches are not copies of each other but have same origin

# Forks are local instantiations that let you make changes to someone else’s codebase.They clone the repository under your profile such that it is linked and changes made to the fork can be compared or merged with the original repository over time.


13. What's the difference between a "pull request" and a "branch"?
=>
# Pull requests let you tell others about changes you've pushed to a GitHub repository. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
# A branch is a slightly changed or modified section of code that meets different objectives.
Branches are not copies of each other but have same origin


14. What is the difference between "git pull" and "git fetch"?
=> git fetch is the command that tells your local git to retrieve the latest meta-data info from the original (yet doesn’t do any file transferring. It’s more like just checking to see if there are any changes available).

git pull on the other hand does that AND brings (copy) those changes from the remote repository.


15. How to revert previous commit in Git?
=> If you want to revert the last commit just do git revert <unwanted commit hash> ; then you can push this new commit, which undid your previous commit. using the commit hash that you get from the git log command


16. Explain the advantages of Forking Workflow
=> The main advantage of the Forking Workflow is that contributions can be integrated without the need for everybody to push to a single central repository. Developers push to their own server-side repositories, and only the project maintainer can push to the official repository. This allows the maintainer to accept commits from any developer without giving them write access to the official codebase.

The following is a step-by-step example of this workflow.

 # A developer 'forks' an 'official' server-side repository. This creates their own server-side copy.
# The new server-side copy is cloned to their local system.
# A Git remote path for the 'official' repository is added to the local clone.
# A new local feature branch is created.
# The developer makes changes on the new branch.
# New commits are created for the changes.
# The branch gets pushed to the developer's own server-side copy.
# The developer opens a pull request from the new branch to the 'official' repository.
# The pull request gets approved for merge and is merged into the original server-side repository


17. Difference between HEAD, working tree and index, in Git?
=> A single git repository can track an arbitrary number of branches, but your working tree is associated with just one of them (the "current" or "checked out" branch), and HEAD points to that branch.

Working trees: They are nothing but the files that you are currently working on.

HEAD: HEAD is a pointer to the branch or commit that you last checked out, and which will be the parent of a new commit if you make it.

The git "index" is where you place files you want commit to the git repository.The index is a staging area where the new commit is prepared.



18. How to identify if a certain branch has been merged into master?
=>
git branch --merged master #lists branches merged into master

git branch --merged #lists branches merged into HEAD (i.e. tip of current branch)

git branch --no-merged #lists branches that have not been merged


19. What is the use of a Git clone?
=>git clone is primarily used to point to an existing repo and make a clone or copy of that repo at in a new directory, at another location. 


20. What is Git stash?
=> git stash temporarily shelves (or stashes) changes you've made to your working copy so you can work on something else, and then come back and re-apply them later on. 


21. When should I use "git stash"?
=> Stashing is handy if you need to quickly switch context and work on something else, but you're mid-way through a code change and aren't quite ready to commit.


22. What is Git stash drop?
=> Git stash drop will delete a particular stash


23. What is Git stash save?
=> git stash save will annotate the stash with a description.
eg : git stash save "Type your message/description"


24. What README.MD ? What is its purpose? What does MD stands for?
=> .md is markdown. README.md is used to generate the html summary you see at the bottom of projects. Github has their own flavor of Markdown.


25. How to create repository from command prompt?
=> * Using terminal
- git init DirectoryName
- git add .
- git commit -m "Creating new repository"
- git push


26. What is the function of ‘git checkout’ in Git?
=> The git checkout command lets you navigate between the branches created by git branch


27. How can you bring a new feature in the main branch?
=> 
# Start with latest on master
$ git checkout master
$ git pull origin master

#Create feature branch 
$ git checkout -b <branch name>

#modify code

#push feature branch to remote
$ git push origin <branch name>

# create a pull request


28. What is the function of ‘git rm’?
=>  git rm is used to remove files from both the staging index and the working directory.


29. What is the function of ‘git stash apply’?
=> it is used to restore your latest saved stash in current working copy


30. What is the use of ‘git log’?
=> The git log command displays committed snapshots


31. What is ‘git add’ is used for?
=> The git add command adds a change in the working directory to the staging area.


32. What is 'git diff' is used for?
=>Diff command is used in git to track the difference between the changes made on a file.


33. What is ‘git status’ is used for?
=> The status command is in frequent use when a working with Git and during a merge it will help identify conflicted files. The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.


34. Can we create multiple branch with one command?
=> yes 


35. what is the command that is used to delete a branch?
=> git branch -d <branch name>


36. What is another option for merging in git?
=> git rebase


37. How to remove a file from git without removing it from your file system?
=> for a single file: $ git rm --cached mylogfile.log
for a single directory: $git rm --cached -r mydirectory


38. Use of "git rebase" instead of "git merge"?
=>  If you would prefer a clean, linear history free of unnecessary merge commits, you should reach for git rebase instead of git merge when integrating changes from another branch.

On the other hand, if you want to preserve the complete history of your project and avoid the risk of re-writing public commits, you can stick with git merge


39. What is a repository in Git?
=> A repository is like a folder for your project in git


40. Command used to write a commit message?
=> git commit -m "enter message here"


41. What does commit object contain?
=> commit object contains meta-information about that point in time, such as a timestamp, the author of the changes since the last commit, a pointer to the previous commit(s), etc.


42. Write one use-case of Github?
=> Git is a popular product in the Version Control category and 1,800+ companies on Siftery have verified that they are using the software. Here is a quick list of some of the high profile customers using Git:

LiveRamp, Lithium Technologies, Microsoft, Amazon, LinkedIn, Cisco, IBM, Intuit, Accenture, Facebook, Rackspace, Yahoo, Apple, T-Mobile, Zendesk, Under Armour, Autodesk, Lenovo, WeWork, Atlassian, BrightRoll, RetailMeNot, MobileIron,Bonobos, OneLogin, Opendoor, and many others.


43. Name some alternative of Git?
=> Mercurial, Bitbucket, Fossil, SVN


44. What is a gist in Git?
=>Gist is an easy method to share snippets or excerpts of data with others.A gist can be a string of code, a bash script or some other small piece of data. These bits of information are hosted by GitHub as a repository. 


45. What is a gist programming?
=> gist programming is used for sharing codes, snippets or data on github.


46. Name any two Git repository hosting services which are common?
=> BitBucket, Gitlab, SourceForge